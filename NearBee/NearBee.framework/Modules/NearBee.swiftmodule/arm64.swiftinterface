// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NearBee
import CoreBluetooth
import CoreData
import CoreLocation
import EddystoneScanner
import Foundation
@_exported import NearBee
import SafariServices
import SocketIO
import Swift
import UserNotifications
extension NearBeeAttachment {
  @objc @NSManaged dynamic public var isSaved: Swift.Bool {
    @objc get
  }
  @objc @NSManaged dynamic public var business: NearBee.NearBeeBusiness? {
    @objc get
  }
  @objc @NSManaged dynamic public var physicalWeb: NearBee.NearBeePhysicalWeb? {
    @objc get
  }
  @objc @NSManaged dynamic public var proximityAttachment: Foundation.NSSet? {
    @objc get
  }
}
extension NearBeePhysicalWeb : NearBee.Attachment {
  @objc dynamic public func getTitle() -> Swift.String?
  @objc dynamic public func getDescription() -> Swift.String?
  @objc dynamic public func getIconURL() -> Swift.String?
  @objc dynamic public func isActive() -> Swift.Bool
  @objc dynamic public func getURL() -> Swift.String?
}
public let NEARBEE_SDK_ERROR_DOMAIN: Swift.String
@objc public enum NearBeeState : Swift.Int {
  case unknown
  case off
  case on
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol NearBeeDelegate : AnyObject {
  @available(iOS, unavailable, renamed: "didFindBeacons")
  @objc optional func onBeaconsFound(_ beacons: [NearBee.NearBeeBeacon])
  @available(iOS, unavailable, renamed: "didLoseBeacons")
  @objc optional func onBeaconsUpdated(_ beacons: [NearBee.NearBeeBeacon])
  @available(iOS, unavailable, renamed: "didUpdateBeacons")
  @objc optional func onBeaconsLost(_ beacons: [NearBee.NearBeeBeacon])
  @available(iOS, unavailable, renamed: "didThrowError")
  @objc optional func onError(_ error: Swift.Error)
  @objc func didFindBeacons(_ beacons: [NearBee.NearBeeBeacon])
  @objc func didUpdateBeacons(_ beacons: [NearBee.NearBeeBeacon])
  @objc func didLoseBeacons(_ beacons: [NearBee.NearBeeBeacon])
  @objc func didUpdateState(_ state: NearBee.NearBeeState)
  @objc func didThrowError(_ error: Swift.Error)
}
@available(iOS, deprecated: 2.0.0, renamed: "Attachment")
@objc public protocol BeaconAttachment {
  @objc func getTitle() -> Swift.String?
  @objc func getDescription() -> Swift.String?
  @objc func getIconURL() -> Swift.String?
  @objc func isActive() -> Swift.Bool
  @objc func getURL() -> Swift.String?
}
@objc public protocol Attachment {
  @objc func getTitle() -> Swift.String?
  @objc func getDescription() -> Swift.String?
  @objc func getIconURL() -> Swift.String?
  @objc func isActive() -> Swift.Bool
  @objc func getURL() -> Swift.String?
}
@objc public class NearBee : ObjectiveC.NSObject {
  @objc deinit
}
extension NearBee {
  @objc dynamic public var state: NearBee.NearBeeState {
    @objc get
  }
  @objc weak dynamic public var delegate: NearBee.NearBeeDelegate? {
    @objc get
    @objc set
  }
  @objc dynamic public var notificationSound: UserNotifications.UNNotificationSoundName {
    @objc get
    @objc set
  }
  @objc dynamic public var geoFenceNotificationThreshold: Foundation.TimeInterval {
    @objc get
    @objc set
  }
  @objc dynamic public var debugMode: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public static func initNearBee() -> NearBee.NearBee?
  @objc dynamic public func getLogFilePath() -> Swift.String
  @objc dynamic public func startScanning()
  @objc dynamic public func stopScanning()
  @objc dynamic public func clearNotificationCache()
  @objc dynamic public func resetProximityBeacons()
  @objc dynamic public func enableBackgroundNotification(_ enable: Swift.Bool)
  @objc dynamic public func startMonitoringGeoFenceRegions()
  @objc dynamic public func stopMonitoringGeoFenceRegions()
  @objc dynamic public func checkAndProcessNearbyNotification(_ notification: UserNotifications.UNNotification, queryParameters: [Swift.String : Swift.String] = [:]) -> Swift.Bool
  @objc dynamic public func displayContentOf(_ eddystoneUrl: Swift.String, queryParameters: [Swift.String : Swift.String] = [:])
  @objc dynamic public func displayUrl(_ urlString: Swift.String)
  @objc dynamic public func fetchAllSavedAttachments(_ completion: (([NearBee.NearBeeAttachment]?) -> ()))
}
extension NearBeeProximityAttachment {
  @objc @NSManaged dynamic public var bannerImageURL: Swift.String? {
    @objc get
  }
  @objc @NSManaged dynamic public var bannerType: Swift.Int16 {
    @objc get
  }
  @objc @NSManaged dynamic public var language: Swift.String? {
    @objc get
  }
}
extension NearBeeProximityAttachment : NearBee.Attachment {
  @objc dynamic public func getTitle() -> Swift.String?
  @objc dynamic public func getDescription() -> Swift.String?
  @objc dynamic public func getIconURL() -> Swift.String?
  @objc dynamic public func isActive() -> Swift.Bool
  @objc dynamic public func getURL() -> Swift.String?
}
@objc(NearBeePhysicalWeb) public class NearBeePhysicalWeb : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension String {
  public func convertToDictionary() -> [Swift.String : Any]?
}
@objc extension UIColor {
  @objc convenience dynamic public init(hexString: Swift.String, alpha: CoreGraphics.CGFloat = 1.0)
}
extension UIDevice {
  public static let modelName: Swift.String
}
@objc(NearBeeGeoFence) public class NearBeeGeoFence : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NearBeeGeoFence {
  @objc @NSManaged dynamic public var id: Swift.Int64 {
    @objc get
  }
  @objc @NSManaged dynamic public var latitude: Swift.Double {
    @objc get
  }
  @objc @NSManaged dynamic public var longitude: Swift.Double {
    @objc get
  }
  @objc @NSManaged dynamic public var radius: Swift.Int64 {
    @objc get
  }
  @objc @NSManaged dynamic public var organization: Swift.Int64 {
    @objc get
  }
  @objc @NSManaged dynamic public var url: Swift.String? {
    @objc get
  }
}
@objc(NearBeeBusiness) public class NearBeeBusiness : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NearBeeAttachment {
  @objc dynamic public func toggleSave()
  @objc dynamic public func display(_ url: Swift.String)
}
@objc(NearBeeBeacon) public class NearBeeBeacon : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NearBeeBeacon {
  @objc @NSManaged dynamic public var eddystoneUID: Swift.String? {
    @objc get
  }
  @objc @available(iOS, deprecated, message: "Use NearBeeAttachment's NearBeeProximityAttachment or NearBeePhysicalWeb")
  @NSManaged dynamic public var eddystoneURL: Swift.String? {
    @objc get
  }
  @objc @available(iOS, deprecated, message: "Use NearBeeAttachment's NearBeeProximityAttachment or NearBeePhysicalWeb")
  @NSManaged dynamic public var physicalWebActive: Swift.Bool {
    @objc get
  }
  @objc @available(iOS, deprecated, message: "Use NearBeeAttachment's NearBeeProximityAttachment or NearBeePhysicalWeb")
  @NSManaged dynamic public var physicalWebDescription: Swift.String? {
    @objc get
  }
  @objc @available(iOS, deprecated, message: "Use NearBeeAttachment's NearBeeProximityAttachment or NearBeePhysicalWeb")
  @NSManaged dynamic public var physicalWebEddystoneURL: Swift.String? {
    @objc get
  }
  @objc @available(iOS, deprecated, message: "Use NearBeeAttachment's NearBeeProximityAttachment or NearBeePhysicalWeb")
  @NSManaged dynamic public var physicalWebIcon: Swift.String? {
    @objc get
  }
  @objc @available(iOS, deprecated, message: "Use NearBeeAttachment's NearBeeProximityAttachment or NearBeePhysicalWeb")
  @NSManaged dynamic public var physicalWebTitle: Swift.String? {
    @objc get
  }
  @objc @available(iOS, deprecated, message: "Use NearBeeAttachment's NearBeeProximityAttachment or NearBeePhysicalWeb")
  @NSManaged dynamic public var physicalWebUpdated: Foundation.Date? {
    @objc get
  }
  @objc @NSManaged dynamic public var attachment: NearBee.NearBeeAttachment? {
    @objc get
  }
  @objc @NSManaged dynamic public var business: NearBee.NearBeeBusiness? {
    @objc get
  }
}
extension NearBeeBeacon {
  @objc dynamic public func getAttachmentForCurrentDeviceLanguage() -> NearBee.Attachment?
  @objc dynamic public func getBestAvailableAttachment() -> NearBee.Attachment?
}
@objc(NearBeeProximityAttachment) public class NearBeeProximityAttachment : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NearBeeBusiness {
  @objc @NSManaged dynamic public var color: Swift.String? {
    @objc get
  }
  @objc @NSManaged dynamic public var coverURL: Swift.String? {
    @objc get
  }
  @objc @NSManaged dynamic public var googlePlaceID: Swift.String? {
    @objc get
  }
  @objc @NSManaged dynamic public var iconURL: Swift.String? {
    @objc get
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
  }
}
@objc(NearBeeAttachment) public class NearBeeAttachment : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NearBee.NearBeeState : Swift.Equatable {}
extension NearBee.NearBeeState : Swift.Hashable {}
extension NearBee.NearBeeState : Swift.RawRepresentable {}
